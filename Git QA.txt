                     "Basic Git Interview Questions and Answers"

1. What is Git?
Git is a DevOps tool for managing source code. It's free and open-source, suitable for projects of any size. Git tracks changes in source code, allowing multiple 
developers to collaborate on development.  

2. What is a repository in Git?
 A Git repository is where version control system (VCS) stores metadata and tracks changes for a group of files and folders. It holds all project-related data, 
 acting as the project folder. Each project has its own distinct repository

3. What is the difference between Git and GitHub?
 Git tracks your source code changes, while GitHub hosts Git repositories online. GitHub provides a user-friendly interface and features like permission control, 
 task management,error tracking, and feature suggestion handling.

4. How does Git work?
 Git captures snapshots of a project's files, including the entire content and changes of each file with every commit. This approach enhances efficiency in 
 operations like branching, merging, and reverting changes compared to other version control systems.

5. What is a commit in Git?
 In Git, a commit records the current changes made to the project. It includes details like the modifications, a unique identifier (SHA-1 hash), the creator's 
 identity, and the timestamp of the commit.

6. What is branching in Git?
 Branching in Git lets you work on separate tasks without affecting the main workflow. It allows isolated development of features, bug fixes, or experiments 
 within specific sections of the repository, keeping each process separate.

7. What is a merge in Git?
 The merge command in Git is used to combine changes from two or more branches into a single branch. This allows developers to work on different branches   
 simultaneously and then merge their changes into a single branch. 

8. What is a conflict in Git?
 In Git, a conflict happens when two branches change the same line in a file or when one branch deletes a file while the other modifies it. Git can't 
 automatically fix these conflicts; the developer needs to resolve them manually.

9. What is a pull request?
 A pull request is a way to contribute changes to a project, commonly used on GitHub. A developer makes changes in their own branch, uploads them to a repository, 
 and then requests a pull. This prompts project maintainers to review the changes, discuss adjustments, and merge the pull request into the main branch.

10. What is `git fetch` vs. `git pull`?
 `git fetch` downloads updates from a remote repository to your local repository without integrating them. On the other hand, `git pull` not only fetches the 
 updates but also incorporates them into your active branch.

11. How do you revert a commit that has already been pushed and made public?
 To undo changes from a previous commit safely, you can use 'git revert <commit_hash>'. This creates a new commit that undoes the changes. Be cautious with 'git 
 reset' as it reverts to an earlier state, potentially altering commit history, especially for public commits.

12. What is a `.gitignore` file?
 A'.gitignore' file tells Git which files or directories to ignore in a project. It typically includes files generated during the build process, local setup 
 files, or files containing sensitive information.

13. How do you clone a repository?
 To create a local copy of a repository on your machine, execute the command `git clone <repository_url>`. This action duplicates the repository locally.

14. What is `git stash`?
 The git stash command saves your current changes temporarily, letting you switch branches without losing your work.

15. How do you view the commit history?
 Use `git log` to view the commit history. There are many options to customize the output, such as `git log --oneline` for a condensed view.

16. What is a remote in Git?
 A Git remote is a shared repository used by team members to exchange updates. Usually, it's hosted on a server or a cloud-based service like GitHub.

17. How do you create a new branch?
 Use `git branch <branch_name>` to create a new branch. Use `git checkout -b <branch_name>` to create and switch to it in one step.

18. What is `git merge --squash`?
 The git merge --squash command combines all commits from a feature branch into one single commit when merging into the target branch, making the project history 
 cleaner.

19. How do you resolve a merge conflict?
 To resolve a merge conflict, edit the files to fix the conflicting changes. Then, use `git add` to stage the resolved files and `git commit` to commit the merge.

20. What is `git rebase`?
 git rebase moves changes from one branch to another, helping to create a cleaner project history by integrating updates from a feature branch onto the main 
 branch.

21. What is the difference between `git merge` and `git rebase`?
 The main difference lies in how branch history is shown. With 'git merge', the history of a feature branch is kept intact by making a new merge commit. 'git 
 rebase' reorganizes the feature branch's history to seem like it was developed from the latest main branch, resulting in a straight-line history.

22. How do you change the last commit?
 Use `git commit --amend` to modify the most recent commit. This can change the commit's message or include new changes.

23. What is `git push`?
 `git push` is used to upload local repository content to a remote repository. It transfers commits from your local repo to the remote.

24. How do you delete a branch?
 Use `git branch -d <branch_name>` to delete a local branch. If the branch is not fully merged you may need to use `-D` instead. To delete a remote branch, use 
 `git push <remote_name> --delete <branch_name>`.

25. What is `git checkout`? 
 git checkout helps us switch between branches or revert files to an earlier state.

26. How do you list all the remote repositories configured?
 Use `git remote -v` to list all the remote repositories configured for your local repository.

27. How do you add a file to the staging area?
 Use `git add <file_name>` to add a file to the staging area, making it ready for a commit.

28. How do you remove a file from Git but not delete it from your file system?
 Use `git rm --cached <file_name>` to remove a file from Git without deleting it from your filesystem.

29. What is `git diff`?
 `git diff` shows the differences between files in the working directory and between commits.

30. How do you rename a Git branch?
 To rename the current branch, use `git branch -m <new_name>`. To rename a different branch, use `git branch -m <old_name> <new_name>`.

31. What does `git reset` do?
 `git reset` is used to undo changes. It has three main modes: `--soft`, `--mixed`, and `--hard`.

32. How do you amend a commit message?
 Use `git commit --amend` to change your most recent commit message.

33. What is the HEAD in Git?
 HEAD is a reference to the last commit in the currently checked-out branch.

34. How do you find a commit by a message?
 Use `git log --grep=<search-pattern>` to search through commit messages.

35. What is the difference between `git stash pop` and `git stash apply`?
 `git stash pop` applies stashed changes and removes them from the stash. `git stash apply` applies stashed changes but keeps them in the stash.

36. How do you list all branches that contain a specific commit?
 Use `git branch --contains <commit>`.

37. What is a fast-forward merge in Git?
 A fast-forward merge occurs when the target branch is behind the merged branch. It catches up by simply moving forward to the merged branch's tip.

38. How do you create an empty commit?
 Use `git commit --allow-empty` to create a commit with no changes.

39. How do you switch branches in Git?
 Use `git checkout <branch-name>` to switch branches.

40. How do you ignore changes in a tracked file?
 Use `git update-index --assume-unchanged <file>` to ignore changes in a tracked file temporarily

                     "Intermediate Git Interview Questions and Answers"

1. Explain the Git branching strategy you use.
 A popular approach is Git Flow. It includes branches like master, develop, feature, release,and hotfix branches, each playing a specific role in the development 
 process.

2. What is the significance of `git merge --no-ff`?
 `git merge --no-ff` creates a merge commit even if the merge could be resolved as a fast-forward, preserving the history of a feature branch.

3. How do you revert a Git repository to a previous commit?
 Use `git reset --hard <commit-hash>` to revert to a specific commit, discarding all changes since that commit.

4. What is a detached HEAD in Git?
 A detached HEAD happens when you switch to a specific commit, branch, or tag that isn't the latest one on a branch.

5. How do you fix a detached HEAD?
 To create a new branch from the detached HEAD state, use git branch <new-branch>, and then switch to it using git checkout <new-branch> to return to a non- 
 detached state.

6. Explain the difference between `git pull` and `git fetch` followed by `git merge`.
 git pull is a convenient way to fetch and merge remote changes in one step, while git fetch followed by git merge gives you more control and visibility over the 
 changes before merging them into your local branch.

7. What is `git rebase --interactive`?
 `git rebase --interactive` allows you to modify commits in many ways, such as rewriting, combining, and removing commits in a more controlled manner.

8. How do you squash the last N commits into a single commit?
 Use `git rebase --interactive HEAD~N` and choose `squash` for the commits you want to combine.

9. What are submodules in Git?
 Submodules let you add another Git repository into your project as a subdirectory. This is useful for incorporating external projects or libraries into your main 
 project.

10. How do you update a submodule?
 Use `git submodule update --remote` to fetch and update your submodules.

11. What is `git bisect`? How do you use it?
 `git bisect` assists in identifying the commit responsible for introducing a bug through the application of a binary search algorithm.

12. How do you change the URL of a remote repository?
 Use `git remote set-url <remote-name> <new-url>` to change the URL.

13. What is the significance of `git push --force`?
 git push --force is used to replace the remote history with your local history. Use it carefully because it can overwrite changes in the remote repository.

14. How do you clean untracked files from your working directory?
 Use `git clean` to remove untracked files from your working directory.

15. What is `git reflog`?
 `git reflog` shows a log of where the HEAD and branch references have been, allowing you to navigate back to previous states.

16. How do you resolve a rebase conflict?
 Resolve the conflict manually in the affected files, then use `git add` to stage the resolved files, and continue the rebase with `git rebase --continue`.

17. What is a bare repository in Git?
 A bare repository is a Git repository that does not have a working directory, making it suitable for sharing code as it contains only the version history.

18. How do you rename a remote branch?
 Rename the local branch, push it to the remote, and then delete the old remote branch.

19. What is the purpose of `git tag -a`?
 git tag -a creates an annotated tag with extra information like the tagger's name, email, and date. It's handy for marking releases.

20. How do you find a list of files that have changed in a specific commit?
 Use `git show --name-only <commit-hash>` to list the files that changed in a commit.

21. What is `git blame` and how do you use it?
 git blame reveals which revision and author last modified each line in a file. It helps track changes and determine who made them.
 
22. How do you configure Git to ignore changes in file permissions?
 Use `git config core.fileMode false` to ignore file permission changes.

23. What is the difference between `HEAD`, `working tree` and `index` in Git?
 HEAD points to the latest commit on the current branch, working tree is all the files in your directory, and index (or staging area) is where you prepare files 
 for committing.

24. How do you make an existing Git branch track a remote branch?
 Use `git branch --set-upstream-to=<remote>/<branch> <local-branch>` to set a local branch to track a remote branch.

25. What does `git fetch --prune` do?
 `git fetch --prune` removes remote-tracking branches that no longer exist on the remote.

26. How do you combine multiple commits into one without merging?
 Use `git rebase --interactive` to squash commits into a single commit without creating a merge commit.

27. What is `git stash drop`?
 `git stash drop` removes a single stashed state from the stash list.

28. How do you list all the remote branches?
 Use `git branch -r` to list all remote branches.

29. What is the purpose of `git gc` (garbage collection)?
 `git gc` cleans up unnecessary files and optimizes the local repository.

30. How do you find who introduced a line of code using Git?
 Use `git blame <file-name>` to see who last modified each line of a file.

31. What does `git commit --dry-run` do?
 It simulates a commit, showing what would be committed without actually committing the changes.

32. How do you revert changes made to the working directory?
 Use `git checkout -- <file-name>` to discard changes in the working directory.

33. What is the purpose of `git log --graph`?
 `git log --graph` displays the commit history in a graphical representation.

34. How do you list all tags in Git?
 Use `git tag` to list all tags in the current repository.

35. What is `git show` and how do you use it?
 `git show <commit-hash>` displays the information about a git object like a commit.

36. How do you copy a commit from one branch to another?
 Use `git cherry-pick <commit-hash>` to apply the changes from a commit on another branch to the current branch.

37. What is `git archive`?
 `git archive` is used to create an archive (zip or tar) of files from a named tree.

38. What does `git checkout --track <remote/branch>` do?
 It creates a new branch that tracks the specified remote branch.

39. How do you compare two branches in Git?
 Use `git diff <branch1>..<branch2>` to see the differences between the two branches.

40. What is `git reset --soft`?
 `git reset --soft <commit-hash>` undoes commits but keeps the changes in the staging area.

                      "Advanced Git Interview Questions and Answers"

1. What is the Git object model?
 The Git object model includes blobs (file data), trees (file structure), commits (recorded changes), and tags (marked points in history).

2. Explain the difference between `git merge` and `git rebase` and when you would use each.
 git merge combines changes from one branch into another, keeping both branch histories. git rebase moves commits from one branch to another, making a straight- 
 line history. Use merge to keep a feature branch's history, and rebase to clean up commit history before merging.

3. How does Git store data?
 Git keeps track of project changes by taking snapshots at different times. Each commit records the state of files at that moment. Git efficiently stores data 
 using compression and direct references to objects.

4. What is the role of the `.git/index` file?
 The `.git/index` file acts as the staging area (or index) for Git. It tracks which changes are staged for the next commit.

5. Explain what a "detached HEAD" is and how you might end up in one.
 A detached HEAD happens when you check out a specific commit instead of a branch. It lets you explore the repository's history without affecting branches.

6. How do you interactively rebase the last N commits?
 Use `git rebase -i HEAD~N` where N is the number of commits you want to rebase. This opens an editor showing the last N commits and allows you to reorder, 
 squash, edit, or drop commits.

7. What are the advantages of using a rebase over a merge?
 Rebase makes the commit history neater and easier to follow, avoiding unnecessary merge commits and simplifying navigation through project history.

8. What is a git hook and how might you use it?
 Git hooks are automated scripts that run before or after certain Git commands like pre-commit , pre-push, post-commit, and post-receive. They're used for tasks 
 like syntax checking, testing, and enforcing project rules.

9. How do you squash the last N commits into one using Git?
 Use `git rebase -i HEAD~N` and mark all but the first commit with "squash" or "fixup" to combine them into a single commit.

10. What is the Git Garbage Collection and when is it called?
 'git gc' is a cleanup task in Git that removes unnecessary files and improves the local repository. It's automatically run by some commands but can also be 
 triggered manually for maintenance.

11. How do you find and restore a deleted file in the Git history?
 Use `git log -- <file-path>` to find the commit where the file was deleted, then use `git checkout <commit-hash>^ -- <file-path>` to restore it.

12. What is the significance of `git push --force-with-lease` over `git push --force`?
 `git push --force-with-lease` ensures that you do not overwrite any work on the remote repository that you haven't seen, unlike `git push --force` which 
 overwrites the remote changes blindly.

13. How can you achieve a Git bisect manually?
 Manually performing a bisect involves checking out commits in a binary search manner to narrow down the commit that introduced a bug, but this is automated with 
 `git bisect`.

14. Explain the difference between `git stash pop` and `git stash apply`.
 git stash pop applies the changes from the latest stash and removes it, while git stash apply applies the changes but keeps them in the stash list.

15. How do you reapply a commit that has been reverted?
 Use `git revert <commit-hash>` to revert the revert commit, effectively reapplying the original commit.

16. What is the purpose of `git cherry-pick`?
 `git cherry-pick` is used to apply the changes introduced by some commits from one branch onto another branch.

17. How do you resolve a binary file conflict in Git?
 Binary file conflicts must be resolved manually by choosing which version of the file to keep, then adding and committing that file.

18. What is the function of `git blame -L`?
 `git blame -L` shows who last modified each line of a file within a given line range.

19. How do you handle large files with Git?
 Use Git Large File Storage (LFS) to handle large files by storing references in the repository but keeping the actual files on a separate server.

20. What is the use of `git submodule` and how do you update one?
 Git submodules let you include one Git repository inside another. To update a submodule, use git submodule update --remote command.

21. How do you list all the aliases you have set in Git?
 Use `git config --get-regexp alias` to list all aliases set in the Git configuration.

22. Explain how to change the base branch of a pull request.
 Changing the base branch of a pull request is typically done by adjusting the target branch using the interface on a Git hosting platform like GitHub or GitLab.

23. What does `git reflog` show and how can it be useful?
 git reflog displays a log of changes to the local repository's HEAD. It helps recover lost commits or track changes made to branches.

24. How do you integrate changes from a remote branch without a merge commit?
 Use `git pull --rebase` to rebase the current branch on top of the remote branch, integrating changes without a merge commit.

25. What is a symbolic reference in Git?
 A symbolic reference is when one reference points to another, like a branch name pointing to a commit. HEAD is a common example of a symbolic reference.

26. How do you find which commit a bug was introduced in?
 Use `git bisect` to perform a binary search through the commit history to find the commit that introduced a bug.

27. What is the purpose of `git worktree`?
 git worktree lets you work on multiple branches at once by creating additional working directories attached to the same repository. This means you can work on 
 different branches simultaneously without switching back and forth.

28. How do you configure Git to use a proxy?
 Configure Git to use a proxy by setting the `http.proxy` or `https.proxy` configuration, for example, `git config --global http.proxy proxy-url`.

29. What is the difference between a shallow clone and a deep clone in Git?
 A shallow clone (`git clone --depth 1`) creates a copy of the repository with a limited history depth, reducing time and space, whereas a deep clone includes the 
 complete history.

30. How do you amend the author of a previous commit?
 Use `git commit --amend --author="New Author Name <email@domain.com>"` to change the author of the most recent commit, or use an interactive rebase for older 
 commits.

31. What is the purpose of `git fsck` and how do you use it?
 `git fsck` (file system check) is used to verify the integrity of the Git file system, checking for corrupt objects.

32. How do you create a patch with Git?
 Use `git diff > patch_name.patch` to create a patch file with the changes between commits or branches.

33. What is the use of `git revert --no-commit`?
 `git revert --no-commit` reverts the changes made by one or more commits without committing the revert, allowing you to make additional changes before committing.

34. How do you implement a Git workflow in a team environment?
 Create a Git workflow by choosing a branching model like Git Flow or GitHub Flow, setting up code reviews, defining commit message guidelines, and implementing 
 CI/CD pipelines.

35. What are Git hooks and how can they be customized for a project?
 Git hooks are scripts that run automatically before or after events like commits, pushes, and receiving. You can customize these scripts by placing them in the 
 .git/hooks directory.

36. How do you troubleshoot connectivity issues when using Git with a remote repository?
 To fix connection problems, check your network, confirm remote repository URLs, make sure authentication details are right, and review proxy settings.

37. What is the significance of the `git fetch --tags` command?
 `git fetch --tags` fetches all tags from the remote repository, updating your local tag references.

38. How can you use Git to track changes in any file, even if it's not code?
 Git can track changes in any file type (binary or text) by adding the file to the repository and committing changes. For binary files, it's often beneficial to 
 use Git LFS.

39. Explain the process of contributing to an open-source project using Git.
 When contributing to an open-source project, you usually fork the project repository, clone your fork, make changes in a new branch, push the branch to your 
 fork, and then submit a pull request to the original repository.

40. How do you manage multiple configurations for different projects in Git?
 Handle various configurations by using git config with flags like --global, --system, or --local to set options at different levels. You can also utilize 
 includeIf in Git configuration to include specific configurations based on the repository.
